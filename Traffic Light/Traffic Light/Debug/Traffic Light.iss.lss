
Traffic Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000044c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000004c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da9  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000800  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008fe  00000000  00000000  00001c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002504  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045f  00000000  00000000  000026c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a2  00000000  00000000  00002b1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002fc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 f2 01 	jmp	0x3e4	; 0x3e4 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c0 00 	call	0x180	; 0x180 <main>
  74:	0c 94 24 02 	jmp	0x448	; 0x448 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <appInit>:
 */ 
#include "application.h"
void appInit()
{
	//uint8_t buttonState ;
	DIO_init(PORT_A , PIN0 , OUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	60 e0       	ldi	r22, 0x00	; 0
  80:	81 e4       	ldi	r24, 0x41	; 65
  82:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_init>
	DIO_init(PORT_A , PIN1 , OUT);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	81 e4       	ldi	r24, 0x41	; 65
  8c:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_init>
	DIO_init(PORT_A , PIN2 , OUT);
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	62 e0       	ldi	r22, 0x02	; 2
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_init>
	DIO_init(PORT_B , PIN0 , OUT);
  9a:	41 e0       	ldi	r20, 0x01	; 1
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_init>
	DIO_init(PORT_B , PIN1 , OUT);
  a4:	41 e0       	ldi	r20, 0x01	; 1
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	82 e4       	ldi	r24, 0x42	; 66
  aa:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_init>
	DIO_init(PORT_B , PIN2 , OUT);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	62 e0       	ldi	r22, 0x02	; 2
  b2:	82 e4       	ldi	r24, 0x42	; 66
  b4:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_init>
	BUTTON_init(PORT_D , PIN2);
  b8:	62 e0       	ldi	r22, 0x02	; 2
  ba:	84 e4       	ldi	r24, 0x44	; 68
  bc:	0e 94 b4 00 	call	0x168	; 0x168 <BUTTON_init>
	/*if (buttonState == 0)
	{
		
		 
	}*/
	SREG  |= (1<<7);
  c0:	8f b7       	in	r24, 0x3f	; 63
  c2:	80 68       	ori	r24, 0x80	; 128
  c4:	8f bf       	out	0x3f, r24	; 63
    Timer0_Init_Normal_Mode();
  c6:	0e 94 00 02 	call	0x400	; 0x400 <Timer0_Init_Normal_Mode>
  ca:	08 95       	ret

000000cc <appStart>:
}
void appStart()
{
	while(1)
	{	
		if (count == 0)
  cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	81 11       	cpse	r24, r1
  d2:	11 c0       	rjmp	.+34     	; 0xf6 <appStart+0x2a>
		{
			LED_off(PORT_A , PIN1);
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	81 e4       	ldi	r24, 0x41	; 65
  d8:	0e 94 bc 00 	call	0x178	; 0x178 <LED_off>
			LED_off(PORT_B , PIN1);			
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	82 e4       	ldi	r24, 0x42	; 66
  e0:	0e 94 bc 00 	call	0x178	; 0x178 <LED_off>
						
			LED_on(PORT_A , PIN0 );
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	81 e4       	ldi	r24, 0x41	; 65
  e8:	0e 94 b8 00 	call	0x170	; 0x170 <LED_on>
			LED_on(PORT_B , PIN2 );
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	82 e4       	ldi	r24, 0x42	; 66
  f0:	0e 94 b8 00 	call	0x170	; 0x170 <LED_on>
  f4:	eb cf       	rjmp	.-42     	; 0xcc <appStart>
		}
		else if (count == 1)
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	89 f4       	brne	.+34     	; 0x11c <appStart+0x50>
		{
			LED_off(PORT_A , PIN0);
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	81 e4       	ldi	r24, 0x41	; 65
  fe:	0e 94 bc 00 	call	0x178	; 0x178 <LED_off>
			//LED_on(PORT_A , PIN1 );
			DIO_toggle(PORT_A , PIN1);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	81 e4       	ldi	r24, 0x41	; 65
 106:	0e 94 bb 01 	call	0x376	; 0x376 <DIO_toggle>
			LED_off(PORT_B , PIN2);
 10a:	62 e0       	ldi	r22, 0x02	; 2
 10c:	82 e4       	ldi	r24, 0x42	; 66
 10e:	0e 94 bc 00 	call	0x178	; 0x178 <LED_off>
			//LED_on(PORT_B , PIN1 );	
			DIO_toggle(PORT_B , PIN1);		
 112:	61 e0       	ldi	r22, 0x01	; 1
 114:	82 e4       	ldi	r24, 0x42	; 66
 116:	0e 94 bb 01 	call	0x376	; 0x376 <DIO_toggle>
 11a:	d8 cf       	rjmp	.-80     	; 0xcc <appStart>
			
		}
		else if (count == 2)
 11c:	82 30       	cpi	r24, 0x02	; 2
 11e:	89 f4       	brne	.+34     	; 0x142 <appStart+0x76>
		{
			LED_off(PORT_A , PIN1);
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	81 e4       	ldi	r24, 0x41	; 65
 124:	0e 94 bc 00 	call	0x178	; 0x178 <LED_off>
			LED_on(PORT_A , PIN2 );
 128:	62 e0       	ldi	r22, 0x02	; 2
 12a:	81 e4       	ldi	r24, 0x41	; 65
 12c:	0e 94 b8 00 	call	0x170	; 0x170 <LED_on>
			LED_off(PORT_B , PIN1);
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	82 e4       	ldi	r24, 0x42	; 66
 134:	0e 94 bc 00 	call	0x178	; 0x178 <LED_off>
			LED_on(PORT_B , PIN0 );			
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	82 e4       	ldi	r24, 0x42	; 66
 13c:	0e 94 b8 00 	call	0x170	; 0x170 <LED_on>
 140:	c5 cf       	rjmp	.-118    	; 0xcc <appStart>
		}	
		else if (count == 3)
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	19 f6       	brne	.-122    	; 0xcc <appStart>
		{
			LED_off(PORT_A , PIN2);
 146:	62 e0       	ldi	r22, 0x02	; 2
 148:	81 e4       	ldi	r24, 0x41	; 65
 14a:	0e 94 bc 00 	call	0x178	; 0x178 <LED_off>
			//LED_on(PORT_A , PIN1 );
			DIO_toggle(PORT_A , PIN1);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	81 e4       	ldi	r24, 0x41	; 65
 152:	0e 94 bb 01 	call	0x376	; 0x376 <DIO_toggle>
			LED_off(PORT_B , PIN0);
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	82 e4       	ldi	r24, 0x42	; 66
 15a:	0e 94 bc 00 	call	0x178	; 0x178 <LED_off>
			//LED_on(PORT_B , PIN1);
			DIO_toggle(PORT_B , PIN1);
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	82 e4       	ldi	r24, 0x42	; 66
 162:	0e 94 bb 01 	call	0x376	; 0x376 <DIO_toggle>
 166:	b2 cf       	rjmp	.-156    	; 0xcc <appStart>

00000168 <BUTTON_init>:
 *  Author: Mostafa
 */ 
#include "button.h"
void BUTTON_init(uint8_t buttonPort , uint8_t buttonPin)
{
	DIO_init(buttonPort , buttonPin , IN);
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	0e 94 c7 00 	call	0x18e	; 0x18e <DIO_init>
 16e:	08 95       	ret

00000170 <LED_on>:
	DIO_init(ledPort,ledPin,OUT);
}

void LED_on(uint8_t ledPort , uint8_t ledPin)
{
	DIO_write(ledPort , ledPin , HIGH);
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	0e 94 41 01 	call	0x282	; 0x282 <DIO_write>
 176:	08 95       	ret

00000178 <LED_off>:
}
void LED_off(uint8_t ledPort , uint8_t ledPin)
{
	DIO_write(ledPort , ledPin , LOW);
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	0e 94 41 01 	call	0x282	; 0x282 <DIO_write>
 17e:	08 95       	ret

00000180 <main>:
//#include <avr/io.h>

#include "Application/application.h"
int main(void)
{
    appInit();
 180:	0e 94 3e 00 	call	0x7c	; 0x7c <appInit>
	appStart();
 184:	0e 94 66 00 	call	0xcc	; 0xcc <appStart>

}
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	08 95       	ret

0000018e <DIO_init>:
 */ 
#include "dio.h"

void DIO_init(uint8_t portNumber , uint8_t pinNumber , uint8_t direction)
{
	switch (portNumber)
 18e:	82 34       	cpi	r24, 0x42	; 66
 190:	31 f1       	breq	.+76     	; 0x1de <DIO_init+0x50>
 192:	18 f4       	brcc	.+6      	; 0x19a <DIO_init+0xc>
 194:	81 34       	cpi	r24, 0x41	; 65
 196:	39 f0       	breq	.+14     	; 0x1a6 <DIO_init+0x18>
 198:	08 95       	ret
 19a:	83 34       	cpi	r24, 0x43	; 67
 19c:	e1 f1       	breq	.+120    	; 0x216 <DIO_init+0x88>
 19e:	84 34       	cpi	r24, 0x44	; 68
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <DIO_init+0x16>
 1a2:	54 c0       	rjmp	.+168    	; 0x24c <DIO_init+0xbe>
 1a4:	08 95       	ret
	{
		case PORT_A:
		if(direction == IN)
 1a6:	41 11       	cpse	r20, r1
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <DIO_init+0x34>
		{
			DDRA &=~ (1<<pinNumber); // Input
 1aa:	2a b3       	in	r18, 0x1a	; 26
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_init+0x28>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_init+0x24>
 1ba:	80 95       	com	r24
 1bc:	82 23       	and	r24, r18
 1be:	8a bb       	out	0x1a, r24	; 26
 1c0:	08 95       	ret
		}
		else if(direction == OUT)
 1c2:	41 30       	cpi	r20, 0x01	; 1
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <DIO_init+0x3a>
 1c6:	5c c0       	rjmp	.+184    	; 0x280 <DIO_init+0xf2>
		{
			DDRA |=(1<<pinNumber); //Output
 1c8:	2a b3       	in	r18, 0x1a	; 26
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_init+0x46>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_init+0x42>
 1d8:	82 2b       	or	r24, r18
 1da:	8a bb       	out	0x1a, r24	; 26
 1dc:	08 95       	ret
		{
			//error handling
		}
		break;
		case PORT_B:
		if(direction == IN)
 1de:	41 11       	cpse	r20, r1
 1e0:	0c c0       	rjmp	.+24     	; 0x1fa <DIO_init+0x6c>
		{
			DDRB &=~ (1<<pinNumber); // Input
 1e2:	27 b3       	in	r18, 0x17	; 23
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_init+0x60>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_init+0x5c>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	87 bb       	out	0x17, r24	; 23
 1f8:	08 95       	ret
		}
		else if(direction == OUT)
 1fa:	41 30       	cpi	r20, 0x01	; 1
 1fc:	09 f0       	breq	.+2      	; 0x200 <DIO_init+0x72>
 1fe:	40 c0       	rjmp	.+128    	; 0x280 <DIO_init+0xf2>
		{
			DDRB |=(1<<pinNumber); //Output
 200:	27 b3       	in	r18, 0x17	; 23
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	02 c0       	rjmp	.+4      	; 0x20c <DIO_init+0x7e>
 208:	88 0f       	add	r24, r24
 20a:	99 1f       	adc	r25, r25
 20c:	6a 95       	dec	r22
 20e:	e2 f7       	brpl	.-8      	; 0x208 <DIO_init+0x7a>
 210:	82 2b       	or	r24, r18
 212:	87 bb       	out	0x17, r24	; 23
 214:	08 95       	ret
		{
			//error handling
		}
		break;
		case PORT_C:
		if(direction == IN)
 216:	41 11       	cpse	r20, r1
 218:	0c c0       	rjmp	.+24     	; 0x232 <DIO_init+0xa4>
		{
			DDRC &=~ (1<<pinNumber); // Input
 21a:	24 b3       	in	r18, 0x14	; 20
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_init+0x98>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_init+0x94>
 22a:	80 95       	com	r24
 22c:	82 23       	and	r24, r18
 22e:	84 bb       	out	0x14, r24	; 20
 230:	08 95       	ret
		}
		else if(direction == OUT)
 232:	41 30       	cpi	r20, 0x01	; 1
 234:	29 f5       	brne	.+74     	; 0x280 <DIO_init+0xf2>
		{
			DDRC |=(1<<pinNumber); //Output
 236:	24 b3       	in	r18, 0x14	; 20
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_init+0xb4>
 23e:	88 0f       	add	r24, r24
 240:	99 1f       	adc	r25, r25
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_init+0xb0>
 246:	82 2b       	or	r24, r18
 248:	84 bb       	out	0x14, r24	; 20
 24a:	08 95       	ret
		{
			//error handling
		}
		break;
		case PORT_D:
		if(direction == IN)
 24c:	41 11       	cpse	r20, r1
 24e:	0c c0       	rjmp	.+24     	; 0x268 <DIO_init+0xda>
		{
			DDRD &=~ (1<<pinNumber); // Input
 250:	21 b3       	in	r18, 0x11	; 17
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_init+0xce>
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_init+0xca>
 260:	80 95       	com	r24
 262:	82 23       	and	r24, r18
 264:	81 bb       	out	0x11, r24	; 17
 266:	08 95       	ret
		}
		else if(direction == OUT)
 268:	41 30       	cpi	r20, 0x01	; 1
 26a:	51 f4       	brne	.+20     	; 0x280 <DIO_init+0xf2>
		{
			DDRD |=(1<<pinNumber); //Output
 26c:	21 b3       	in	r18, 0x11	; 17
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_init+0xea>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_init+0xe6>
 27c:	82 2b       	or	r24, r18
 27e:	81 bb       	out	0x11, r24	; 17
 280:	08 95       	ret

00000282 <DIO_write>:
	}
}

void DIO_write(uint8_t portNumber , uint8_t pinNumber , uint8_t value)
{
	switch (portNumber)
 282:	82 34       	cpi	r24, 0x42	; 66
 284:	31 f1       	breq	.+76     	; 0x2d2 <DIO_write+0x50>
 286:	18 f4       	brcc	.+6      	; 0x28e <DIO_write+0xc>
 288:	81 34       	cpi	r24, 0x41	; 65
 28a:	39 f0       	breq	.+14     	; 0x29a <DIO_write+0x18>
 28c:	08 95       	ret
 28e:	83 34       	cpi	r24, 0x43	; 67
 290:	e1 f1       	breq	.+120    	; 0x30a <DIO_write+0x88>
 292:	84 34       	cpi	r24, 0x44	; 68
 294:	09 f4       	brne	.+2      	; 0x298 <DIO_write+0x16>
 296:	54 c0       	rjmp	.+168    	; 0x340 <DIO_write+0xbe>
 298:	08 95       	ret
	{
		case PORT_A:
		if(value == LOW)
 29a:	41 11       	cpse	r20, r1
 29c:	0c c0       	rjmp	.+24     	; 0x2b6 <DIO_write+0x34>
		{
			PORTA &=~ (1<<pinNumber); // Write 0
 29e:	2b b3       	in	r18, 0x1b	; 27
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_write+0x28>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_write+0x24>
 2ae:	80 95       	com	r24
 2b0:	82 23       	and	r24, r18
 2b2:	8b bb       	out	0x1b, r24	; 27
 2b4:	08 95       	ret
		}
		else if(value == HIGH)
 2b6:	41 30       	cpi	r20, 0x01	; 1
 2b8:	09 f0       	breq	.+2      	; 0x2bc <DIO_write+0x3a>
 2ba:	5c c0       	rjmp	.+184    	; 0x374 <DIO_write+0xf2>
		{
			PORTA |=(1<<pinNumber); //Write 1
 2bc:	2b b3       	in	r18, 0x1b	; 27
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_write+0x46>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_write+0x42>
 2cc:	82 2b       	or	r24, r18
 2ce:	8b bb       	out	0x1b, r24	; 27
 2d0:	08 95       	ret
		{
			//error handling
		}
		break;
		case PORT_B:
		if(value == LOW)
 2d2:	41 11       	cpse	r20, r1
 2d4:	0c c0       	rjmp	.+24     	; 0x2ee <DIO_write+0x6c>
		{
			PORTB &=~ (1<<pinNumber); // Write 0
 2d6:	28 b3       	in	r18, 0x18	; 24
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_write+0x60>
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	6a 95       	dec	r22
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_write+0x5c>
 2e6:	80 95       	com	r24
 2e8:	82 23       	and	r24, r18
 2ea:	88 bb       	out	0x18, r24	; 24
 2ec:	08 95       	ret
		}
		else if(value == HIGH)
 2ee:	41 30       	cpi	r20, 0x01	; 1
 2f0:	09 f0       	breq	.+2      	; 0x2f4 <DIO_write+0x72>
 2f2:	40 c0       	rjmp	.+128    	; 0x374 <DIO_write+0xf2>
		{
			PORTB |=(1<<pinNumber); //Write 1
 2f4:	28 b3       	in	r18, 0x18	; 24
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_write+0x7e>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	6a 95       	dec	r22
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_write+0x7a>
 304:	82 2b       	or	r24, r18
 306:	88 bb       	out	0x18, r24	; 24
 308:	08 95       	ret
		{
			//error handling
		}
		break;
		case PORT_C:
		if(value == LOW)
 30a:	41 11       	cpse	r20, r1
 30c:	0c c0       	rjmp	.+24     	; 0x326 <DIO_write+0xa4>
		{
			PORTC &=~ (1<<pinNumber); // Write 0
 30e:	25 b3       	in	r18, 0x15	; 21
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_write+0x98>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_write+0x94>
 31e:	80 95       	com	r24
 320:	82 23       	and	r24, r18
 322:	85 bb       	out	0x15, r24	; 21
 324:	08 95       	ret
		}
		else if(value == HIGH)
 326:	41 30       	cpi	r20, 0x01	; 1
 328:	29 f5       	brne	.+74     	; 0x374 <DIO_write+0xf2>
		{
			PORTC |=(1<<pinNumber); //Write 1
 32a:	25 b3       	in	r18, 0x15	; 21
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_write+0xb4>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_write+0xb0>
 33a:	82 2b       	or	r24, r18
 33c:	85 bb       	out	0x15, r24	; 21
 33e:	08 95       	ret
		{
			//error handling
		}
		break;
		case PORT_D:
		if(value == LOW)
 340:	41 11       	cpse	r20, r1
 342:	0c c0       	rjmp	.+24     	; 0x35c <DIO_write+0xda>
		{
			PORTD &=~ (1<<pinNumber); // Write 0
 344:	22 b3       	in	r18, 0x12	; 18
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_write+0xce>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_write+0xca>
 354:	80 95       	com	r24
 356:	82 23       	and	r24, r18
 358:	82 bb       	out	0x12, r24	; 18
 35a:	08 95       	ret
		}
		else if(value == HIGH)
 35c:	41 30       	cpi	r20, 0x01	; 1
 35e:	51 f4       	brne	.+20     	; 0x374 <DIO_write+0xf2>
		{
			PORTD |=(1<<pinNumber); //Write 1
 360:	22 b3       	in	r18, 0x12	; 18
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_write+0xea>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_write+0xe6>
 370:	82 2b       	or	r24, r18
 372:	82 bb       	out	0x12, r24	; 18
 374:	08 95       	ret

00000376 <DIO_toggle>:
	}
}

void DIO_toggle(uint8_t portNumber , uint8_t pinNumber)
{
	switch(portNumber)
 376:	82 34       	cpi	r24, 0x42	; 66
 378:	a1 f0       	breq	.+40     	; 0x3a2 <DIO_toggle+0x2c>
 37a:	18 f4       	brcc	.+6      	; 0x382 <DIO_toggle+0xc>
 37c:	81 34       	cpi	r24, 0x41	; 65
 37e:	31 f0       	breq	.+12     	; 0x38c <DIO_toggle+0x16>
 380:	08 95       	ret
 382:	83 34       	cpi	r24, 0x43	; 67
 384:	c9 f0       	breq	.+50     	; 0x3b8 <DIO_toggle+0x42>
 386:	84 34       	cpi	r24, 0x44	; 68
 388:	11 f1       	breq	.+68     	; 0x3ce <DIO_toggle+0x58>
 38a:	08 95       	ret
	{
		case PORT_A:
		PORTA ^=(1<<pinNumber);
 38c:	2b b3       	in	r18, 0x1b	; 27
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_toggle+0x22>
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	6a 95       	dec	r22
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_toggle+0x1e>
 39c:	82 27       	eor	r24, r18
 39e:	8b bb       	out	0x1b, r24	; 27
		break;
 3a0:	08 95       	ret
		case PORT_B:
		PORTB ^=(1<<pinNumber);
 3a2:	28 b3       	in	r18, 0x18	; 24
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_toggle+0x38>
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	6a 95       	dec	r22
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_toggle+0x34>
 3b2:	82 27       	eor	r24, r18
 3b4:	88 bb       	out	0x18, r24	; 24
		break;
 3b6:	08 95       	ret
		case PORT_C:
		PORTC ^=(1<<pinNumber);
 3b8:	25 b3       	in	r18, 0x15	; 21
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_toggle+0x4e>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	6a 95       	dec	r22
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_toggle+0x4a>
 3c8:	82 27       	eor	r24, r18
 3ca:	85 bb       	out	0x15, r24	; 21
		break;
 3cc:	08 95       	ret
		case PORT_D:
		PORTD ^=(1<<pinNumber);
 3ce:	22 b3       	in	r18, 0x12	; 18
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_toggle+0x64>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_toggle+0x60>
 3de:	82 27       	eor	r24, r18
 3e0:	82 bb       	out	0x12, r24	; 18
 3e2:	08 95       	ret

000003e4 <__vector_1>:
	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
	SREG  |= (1<<7); 

}
ISR(INT0_vect)
{
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	8f 93       	push	r24
	PORTA = 0X0F;
 3f0:	8f e0       	ldi	r24, 0x0F	; 15
 3f2:	8b bb       	out	0x1b, r24	; 27
}
 3f4:	8f 91       	pop	r24
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <Timer0_Init_Normal_Mode>:
#define NUMBER_OF_OVER_FLOW_PER_FIVE_SECOND   20
uint8_t tick =0 , count = 0;
void Timer0_Init_Normal_Mode(void)
{
	//timer set initial value
	TCNT0 = 0x00;
 400:	12 be       	out	0x32, r1	; 50
	//choose timer mode
	/*1- Normal Mode bit3- WGM01 = 0 , bit6- WGM00 = 0 
	  2- Normal Mode bit4- COM00 = 0 , bit5- COM01 = 0
	  3- CLOCK = F_CPU /1024 CS00 = 1 , CS01 = 0 , CS02 =1 */
	TCCR0 = (1<<7) | (1<<2) | (1<<0); //normal mode     
 402:	85 e8       	ldi	r24, 0x85	; 133
 404:	83 bf       	out	0x33, r24	; 51
	TIMSK = (1<<0); //enable timer0 overflow interrupt TOIE0 = 1
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	89 bf       	out	0x39, r24	; 57
 40a:	08 95       	ret

0000040c <__vector_11>:
	
}
ISR(TIMER0_OVF_vect)
{
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	8f 93       	push	r24
	
	tick ++;
 418:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <tick>
 41c:	8f 5f       	subi	r24, 0xFF	; 255
 41e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <tick>
	if (tick == NUMBER_OF_OVER_FLOW_PER_FIVE_SECOND)
 422:	84 31       	cpi	r24, 0x14	; 20
 424:	59 f4       	brne	.+22     	; 0x43c <__vector_11+0x30>
	{
		count ++;	
 426:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 42a:	8f 5f       	subi	r24, 0xFF	; 255
 42c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			if (count == 4)
 430:	84 30       	cpi	r24, 0x04	; 4
 432:	11 f4       	brne	.+4      	; 0x438 <__vector_11+0x2c>
			{
				count = 0;
 434:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
		tick =0;		
 438:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <tick>
	}


 43c:	8f 91       	pop	r24
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <_exit>:
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
