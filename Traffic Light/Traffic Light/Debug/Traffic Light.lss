
Traffic Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000552  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000552  000005c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f2e  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000866  00000000  00000000  000016a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ae1  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e8  00000000  00000000  000029ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046f  00000000  00000000  00002bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000563  00000000  00000000  00003043  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  000035a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
  8a:	0c 94 a7 02 	jmp	0x54e	; 0x54e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <appInit>:
//initialize mode   1 for normal mode     0 for pedestrian mode
uint8_t mode = 1;
void appInit()
{
	//initialize car leds 
	LED_init(PORT_A , PIN0);   //initialize green led car
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LED_init>
	LED_init(PORT_A , PIN1);   //initialize yellow led car
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LED_init>
	LED_init(PORT_A , PIN2);   //initialize red led car
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LED_init>
	LED_init(PORT_B , PIN0);   //initialize green led pedestrian
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LED_init>
	LED_init(PORT_B , PIN1);   //initialize yellow led pedestrian
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LED_init>
	LED_init(PORT_B , PIN2);   //initialize red led pedestrian
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <LED_init>

	PORTA = 0; // leds car off
  c2:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0; // led pedestrian off
  c4:	18 ba       	out	0x18, r1	; 24

	BUTTON_init(PORT_D , PIN2);	// initialize button on PD2 
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	84 e4       	ldi	r24, 0x44	; 68
  ca:	0e 94 dd 00 	call	0x1ba	; 0x1ba <BUTTON_init>
	
    
	INT0_Init(); //initialize interrupt INT0 
  ce:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <INT0_Init>
  d2:	08 95       	ret

000000d4 <appStart>:
{
	while (1)
	{
		// Normal Mode
		//if INT0 occurred pedestrian mode will on
		if(mode == 1) //check if interrupt  not occurred
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	e1 f4       	brne	.+56     	; 0x114 <appStart+0x40>
		{
            while(PIND & (1<<2));
  dc:	82 99       	sbic	0x10, 2	; 16
  de:	fe cf       	rjmp	.-4      	; 0xdc <appStart+0x8>
				if(mode == 1) //check if interrupt not occurred
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	29 f4       	brne	.+10     	; 0xee <appStart+0x1a>
				{
					PORTB = 0; // pedestrian leds is off
  e4:	18 ba       	out	0x18, r1	; 24
					PORTA = 0x01; //car's green led is on
  e6:	8b bb       	out	0x1b, r24	; 27
					Delay_s(5); // wait for 5 seconds
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
				}

				if(mode == 1) //check if interrupt not occurred
  ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	29 f4       	brne	.+10     	; 0x100 <appStart+0x2c>
				{
					PORTA = 0x02; //car's yellow led is on
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	8b bb       	out	0x1b, r24	; 27
					led_plink(PORTA_ID); //plink yellow led each 1s
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	0e 94 ed 00 	call	0x1da	; 0x1da <led_plink>
				}

				if(mode == 1) //check if interrupt not occurred
 100:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	31 f7       	brne	.-52     	; 0xd4 <appStart>
				{
					PORTA = 0x04; //car's red led is on
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	8b bb       	out	0x1b, r24	; 27
					Delay_s(5);// wait for 5 seconds
 10c:	85 e0       	ldi	r24, 0x05	; 5
 10e:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
 112:	e0 cf       	rjmp	.-64     	; 0xd4 <appStart>
		}
		//Pedestrian Mode
		else
		{
			//if button pressed when car's led is green
			if(PINA & (1<<0))
 114:	c8 9b       	sbis	0x19, 0	; 25
 116:	1f c0       	rjmp	.+62     	; 0x156 <appStart+0x82>
			{
				PORTA =0; // cars leds is off
 118:	1b ba       	out	0x1b, r1	; 27
				LED_on(PORT_B , PIN2); //pedestrian's led red is on
 11a:	62 e0       	ldi	r22, 0x02	; 2
 11c:	82 e4       	ldi	r24, 0x42	; 66
 11e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_on>
				DoubleLedPlink(); //plink both yellow leds in car and pedestrian
 122:	0e 94 3a 01 	call	0x274	; 0x274 <DoubleLedPlink>
				PORTB = 0x01; //pedestrian's led green is on
 126:	c1 e0       	ldi	r28, 0x01	; 1
 128:	c8 bb       	out	0x18, r28	; 24
				LED_on(PORT_A , PIN2); //car's led red is on
 12a:	62 e0       	ldi	r22, 0x02	; 2
 12c:	81 e4       	ldi	r24, 0x41	; 65
 12e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_on>
				Delay_s(5); // wait for 5 seconds
 132:	85 e0       	ldi	r24, 0x05	; 5
 134:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
				LED_off(PORT_A , PIN2); //car's led red is off
 138:	62 e0       	ldi	r22, 0x02	; 2
 13a:	81 e4       	ldi	r24, 0x41	; 65
 13c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LED_off>
				DoubleLedPlink(); //plink both yellow leds in car and pedestrian
 140:	0e 94 3a 01 	call	0x274	; 0x274 <DoubleLedPlink>
				PORTB = 0x04; //pedestrian's led red is on
 144:	84 e0       	ldi	r24, 0x04	; 4
 146:	88 bb       	out	0x18, r24	; 24
				PORTA = 0x01; //car's led green is on
 148:	cb bb       	out	0x1b, r28	; 27
				Delay_s(5); // wait for 5 seconds
 14a:	85 e0       	ldi	r24, 0x05	; 5
 14c:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
				mode = 1; //return to normal mode
 150:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
 154:	bf cf       	rjmp	.-130    	; 0xd4 <appStart>
			}
			//if button pressed when car's led is yellow
			else if(PINA & (1<<1))
 156:	c9 9b       	sbis	0x19, 1	; 25
 158:	1f c0       	rjmp	.+62     	; 0x198 <appStart+0xc4>
			{
				PORTA =0; // cars leds is off
 15a:	1b ba       	out	0x1b, r1	; 27
				LED_on(PORT_B , PIN2); //pedestrian's led red is on
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	82 e4       	ldi	r24, 0x42	; 66
 160:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_on>
				DoubleLedPlink(); //plink both yellow leds in car and pedestrian
 164:	0e 94 3a 01 	call	0x274	; 0x274 <DoubleLedPlink>
				PORTB = 0x01; //pedestrian's led green is on
 168:	c1 e0       	ldi	r28, 0x01	; 1
 16a:	c8 bb       	out	0x18, r28	; 24
				LED_on(PORT_A , PIN2); //car's led red is on
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	81 e4       	ldi	r24, 0x41	; 65
 170:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_on>
				Delay_s(5); // wait for 5 seconds
 174:	85 e0       	ldi	r24, 0x05	; 5
 176:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
				LED_off(PORT_A , PIN2); //car's led red is off
 17a:	62 e0       	ldi	r22, 0x02	; 2
 17c:	81 e4       	ldi	r24, 0x41	; 65
 17e:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LED_off>
				DoubleLedPlink(); //plink both yellow leds in car and pedestrian
 182:	0e 94 3a 01 	call	0x274	; 0x274 <DoubleLedPlink>
				PORTB = 0x04; //pedestrian's led red is on
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	88 bb       	out	0x18, r24	; 24
				PORTA = 0x01; //car's led green is on
 18a:	cb bb       	out	0x1b, r28	; 27
				Delay_s(5); // wait for 5 seconds
 18c:	85 e0       	ldi	r24, 0x05	; 5
 18e:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
				mode = 1; //return to normal mode
 192:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>
 196:	9e cf       	rjmp	.-196    	; 0xd4 <appStart>
			}
			//if button pressed when car's led is red
			else if(PINA & (1<<2))
 198:	ca 9b       	sbis	0x19, 2	; 25
 19a:	9c cf       	rjmp	.-200    	; 0xd4 <appStart>
			{
				LED_on(PORT_B , PIN0); //pedestrian's led green is on
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	82 e4       	ldi	r24, 0x42	; 66
 1a0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_on>
				LED_on(PORT_A , PIN2); //car's led red is on
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	81 e4       	ldi	r24, 0x41	; 65
 1a8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <LED_on>
				Delay_s(5); // wait for 5 seconds
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
				mode = 1; //return to normal mode
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b8:	8d cf       	rjmp	.-230    	; 0xd4 <appStart>

000001ba <BUTTON_init>:
 *  Author: Mostafa
 */ 
#include "button.h"
void BUTTON_init(uint8_t buttonPort , uint8_t buttonPin)
{
	DIO_init(buttonPort , buttonPin , IN);
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_init>
 1c0:	08 95       	ret

000001c2 <LED_init>:
{
	DIO_write(ledPort , ledPin , LOW);
}
void LED_toggle(uint8_t ledPort , uint8_t ledPin)
{
	DIO_toggle(ledPort , ledPin);
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_init>
 1c8:	08 95       	ret

000001ca <LED_on>:
 1ca:	41 e0       	ldi	r20, 0x01	; 1
 1cc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_write>
 1d0:	08 95       	ret

000001d2 <LED_off>:
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <DIO_write>
 1d8:	08 95       	ret

000001da <led_plink>:
}
void led_plink(uint8_t port)
{
 1da:	cf 93       	push	r28
	switch(port)
 1dc:	88 23       	and	r24, r24
 1de:	19 f0       	breq	.+6      	; 0x1e6 <led_plink+0xc>
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	21 f1       	breq	.+72     	; 0x22c <led_plink+0x52>
 1e4:	45 c0       	rjmp	.+138    	; 0x270 <led_plink+0x96>
	{
		case 0 :
		PORTA ^= (1<<1);
 1e6:	8b b3       	in	r24, 0x1b	; 27
 1e8:	c2 e0       	ldi	r28, 0x02	; 2
 1ea:	8c 27       	eor	r24, r28
 1ec:	8b bb       	out	0x1b, r24	; 27

		Delay_s(1);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
		PORTA ^= (1<<1);
 1f4:	8b b3       	in	r24, 0x1b	; 27
 1f6:	8c 27       	eor	r24, r28
 1f8:	8b bb       	out	0x1b, r24	; 27

		Delay_s(1);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
		PORTA ^= (1<<1);
 200:	8b b3       	in	r24, 0x1b	; 27
 202:	8c 27       	eor	r24, r28
 204:	8b bb       	out	0x1b, r24	; 27

		Delay_s(1);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
		PORTA ^= (1<<1);
 20c:	8b b3       	in	r24, 0x1b	; 27
 20e:	8c 27       	eor	r24, r28
 210:	8b bb       	out	0x1b, r24	; 27

		Delay_s(1);
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
		PORTA ^= (1<<1);
 218:	8b b3       	in	r24, 0x1b	; 27
 21a:	8c 27       	eor	r24, r28
 21c:	8b bb       	out	0x1b, r24	; 27

		Delay_s(1);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
		PORTA ^= (1<<1);
 224:	8b b3       	in	r24, 0x1b	; 27
 226:	c8 27       	eor	r28, r24
 228:	cb bb       	out	0x1b, r28	; 27
		break;
 22a:	22 c0       	rjmp	.+68     	; 0x270 <led_plink+0x96>
		case 1 :
		PORTB ^= (1<<1);
 22c:	88 b3       	in	r24, 0x18	; 24
 22e:	c2 e0       	ldi	r28, 0x02	; 2
 230:	8c 27       	eor	r24, r28
 232:	88 bb       	out	0x18, r24	; 24

		Delay_s(1);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
		PORTB ^= (1<<1);
 23a:	88 b3       	in	r24, 0x18	; 24
 23c:	8c 27       	eor	r24, r28
 23e:	88 bb       	out	0x18, r24	; 24

		Delay_s(1);
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
		PORTB ^= (1<<1);
 246:	88 b3       	in	r24, 0x18	; 24
 248:	8c 27       	eor	r24, r28
 24a:	88 bb       	out	0x18, r24	; 24

		Delay_s(1);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
		PORTB ^= (1<<1);
 252:	88 b3       	in	r24, 0x18	; 24
 254:	8c 27       	eor	r24, r28
 256:	88 bb       	out	0x18, r24	; 24

		Delay_s(1);
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
		PORTB ^= (1<<1);
 25e:	88 b3       	in	r24, 0x18	; 24
 260:	8c 27       	eor	r24, r28
 262:	88 bb       	out	0x18, r24	; 24

		Delay_s(1);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
		PORTB ^= (1<<1);
 26a:	88 b3       	in	r24, 0x18	; 24
 26c:	c8 27       	eor	r28, r24
 26e:	c8 bb       	out	0x18, r28	; 24

		break;
	}

}
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <DoubleLedPlink>:
void DoubleLedPlink(void)
{
 274:	cf 93       	push	r28
	PORTA ^= (1<<1);
 276:	8b b3       	in	r24, 0x1b	; 27
 278:	c2 e0       	ldi	r28, 0x02	; 2
 27a:	8c 27       	eor	r24, r28
 27c:	8b bb       	out	0x1b, r24	; 27
	PORTB ^= (1<<1);
 27e:	88 b3       	in	r24, 0x18	; 24
 280:	8c 27       	eor	r24, r28
 282:	88 bb       	out	0x18, r24	; 24

	Delay_s(1);
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
	PORTA ^= (1<<1);
 28a:	8b b3       	in	r24, 0x1b	; 27
 28c:	8c 27       	eor	r24, r28
 28e:	8b bb       	out	0x1b, r24	; 27
	PORTB ^= (1<<1);
 290:	88 b3       	in	r24, 0x18	; 24
 292:	8c 27       	eor	r24, r28
 294:	88 bb       	out	0x18, r24	; 24

	Delay_s(1);
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
	PORTA ^= (1<<1);
 29c:	8b b3       	in	r24, 0x1b	; 27
 29e:	8c 27       	eor	r24, r28
 2a0:	8b bb       	out	0x1b, r24	; 27
	PORTB ^= (1<<1);
 2a2:	88 b3       	in	r24, 0x18	; 24
 2a4:	8c 27       	eor	r24, r28
 2a6:	88 bb       	out	0x18, r24	; 24

	Delay_s(1);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
	PORTA ^= (1<<1);
 2ae:	8b b3       	in	r24, 0x1b	; 27
 2b0:	8c 27       	eor	r24, r28
 2b2:	8b bb       	out	0x1b, r24	; 27
	PORTB ^= (1<<1);
 2b4:	88 b3       	in	r24, 0x18	; 24
 2b6:	8c 27       	eor	r24, r28
 2b8:	88 bb       	out	0x18, r24	; 24

	Delay_s(1);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
	PORTA ^= (1<<1);
 2c0:	8b b3       	in	r24, 0x1b	; 27
 2c2:	8c 27       	eor	r24, r28
 2c4:	8b bb       	out	0x1b, r24	; 27
	PORTB ^= (1<<1);
 2c6:	88 b3       	in	r24, 0x18	; 24
 2c8:	8c 27       	eor	r24, r28
 2ca:	88 bb       	out	0x18, r24	; 24

	Delay_s(1);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 90 02 	call	0x520	; 0x520 <Delay_s>
	PORTA ^= (1<<1);
 2d2:	8b b3       	in	r24, 0x1b	; 27
 2d4:	8c 27       	eor	r24, r28
 2d6:	8b bb       	out	0x1b, r24	; 27
	PORTB ^= (1<<1);
 2d8:	88 b3       	in	r24, 0x18	; 24
 2da:	c8 27       	eor	r28, r24
 2dc:	c8 bb       	out	0x18, r28	; 24

 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <main>:

#include "Application/application.h"

int main(void)
{
    appInit();
 2e2:	0e 94 49 00 	call	0x92	; 0x92 <appInit>
	appStart();
 2e6:	0e 94 6a 00 	call	0xd4	; 0xd4 <appStart>

}
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	08 95       	ret

000002f0 <DIO_init>:
 */ 
#include "dio.h"

void DIO_init(uint8_t portNumber , uint8_t pinNumber , uint8_t direction)
{
	switch (portNumber)
 2f0:	82 34       	cpi	r24, 0x42	; 66
 2f2:	31 f1       	breq	.+76     	; 0x340 <DIO_init+0x50>
 2f4:	18 f4       	brcc	.+6      	; 0x2fc <DIO_init+0xc>
 2f6:	81 34       	cpi	r24, 0x41	; 65
 2f8:	39 f0       	breq	.+14     	; 0x308 <DIO_init+0x18>
 2fa:	08 95       	ret
 2fc:	83 34       	cpi	r24, 0x43	; 67
 2fe:	e1 f1       	breq	.+120    	; 0x378 <DIO_init+0x88>
 300:	84 34       	cpi	r24, 0x44	; 68
 302:	09 f4       	brne	.+2      	; 0x306 <DIO_init+0x16>
 304:	54 c0       	rjmp	.+168    	; 0x3ae <DIO_init+0xbe>
 306:	08 95       	ret
	{
		case PORT_A:
		if(direction == IN)
 308:	41 11       	cpse	r20, r1
 30a:	0c c0       	rjmp	.+24     	; 0x324 <DIO_init+0x34>
		{
			DDRA &=~ (1<<pinNumber); // Input
 30c:	2a b3       	in	r18, 0x1a	; 26
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_init+0x28>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_init+0x24>
 31c:	80 95       	com	r24
 31e:	82 23       	and	r24, r18
 320:	8a bb       	out	0x1a, r24	; 26
 322:	08 95       	ret
		}
		else if(direction == OUT)
 324:	41 30       	cpi	r20, 0x01	; 1
 326:	09 f0       	breq	.+2      	; 0x32a <DIO_init+0x3a>
 328:	5c c0       	rjmp	.+184    	; 0x3e2 <DIO_init+0xf2>
		{
			DDRA |=(1<<pinNumber); //Output
 32a:	2a b3       	in	r18, 0x1a	; 26
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_init+0x46>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_init+0x42>
 33a:	82 2b       	or	r24, r18
 33c:	8a bb       	out	0x1a, r24	; 26
 33e:	08 95       	ret
		{
			//error handling
		}
		break;
		case PORT_B:
		if(direction == IN)
 340:	41 11       	cpse	r20, r1
 342:	0c c0       	rjmp	.+24     	; 0x35c <DIO_init+0x6c>
		{
			DDRB &=~ (1<<pinNumber); // Input
 344:	27 b3       	in	r18, 0x17	; 23
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	02 c0       	rjmp	.+4      	; 0x350 <DIO_init+0x60>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	6a 95       	dec	r22
 352:	e2 f7       	brpl	.-8      	; 0x34c <DIO_init+0x5c>
 354:	80 95       	com	r24
 356:	82 23       	and	r24, r18
 358:	87 bb       	out	0x17, r24	; 23
 35a:	08 95       	ret
		}
		else if(direction == OUT)
 35c:	41 30       	cpi	r20, 0x01	; 1
 35e:	09 f0       	breq	.+2      	; 0x362 <DIO_init+0x72>
 360:	40 c0       	rjmp	.+128    	; 0x3e2 <DIO_init+0xf2>
		{
			DDRB |=(1<<pinNumber); //Output
 362:	27 b3       	in	r18, 0x17	; 23
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_init+0x7e>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_init+0x7a>
 372:	82 2b       	or	r24, r18
 374:	87 bb       	out	0x17, r24	; 23
 376:	08 95       	ret
		{
			//error handling
		}
		break;
		case PORT_C:
		if(direction == IN)
 378:	41 11       	cpse	r20, r1
 37a:	0c c0       	rjmp	.+24     	; 0x394 <DIO_init+0xa4>
		{
			DDRC &=~ (1<<pinNumber); // Input
 37c:	24 b3       	in	r18, 0x14	; 20
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_init+0x98>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_init+0x94>
 38c:	80 95       	com	r24
 38e:	82 23       	and	r24, r18
 390:	84 bb       	out	0x14, r24	; 20
 392:	08 95       	ret
		}
		else if(direction == OUT)
 394:	41 30       	cpi	r20, 0x01	; 1
 396:	29 f5       	brne	.+74     	; 0x3e2 <DIO_init+0xf2>
		{
			DDRC |=(1<<pinNumber); //Output
 398:	24 b3       	in	r18, 0x14	; 20
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_init+0xb4>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_init+0xb0>
 3a8:	82 2b       	or	r24, r18
 3aa:	84 bb       	out	0x14, r24	; 20
 3ac:	08 95       	ret
		{
			//error handling
		}
		break;
		case PORT_D:
		if(direction == IN)
 3ae:	41 11       	cpse	r20, r1
 3b0:	0c c0       	rjmp	.+24     	; 0x3ca <DIO_init+0xda>
		{
			DDRD &=~ (1<<pinNumber); // Input
 3b2:	21 b3       	in	r18, 0x11	; 17
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_init+0xce>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	6a 95       	dec	r22
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_init+0xca>
 3c2:	80 95       	com	r24
 3c4:	82 23       	and	r24, r18
 3c6:	81 bb       	out	0x11, r24	; 17
 3c8:	08 95       	ret
		}
		else if(direction == OUT)
 3ca:	41 30       	cpi	r20, 0x01	; 1
 3cc:	51 f4       	brne	.+20     	; 0x3e2 <DIO_init+0xf2>
		{
			DDRD |=(1<<pinNumber); //Output
 3ce:	21 b3       	in	r18, 0x11	; 17
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_init+0xea>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_init+0xe6>
 3de:	82 2b       	or	r24, r18
 3e0:	81 bb       	out	0x11, r24	; 17
 3e2:	08 95       	ret

000003e4 <DIO_write>:
	}
}

void DIO_write(uint8_t portNumber , uint8_t pinNumber , uint8_t value)
{
	switch (portNumber)
 3e4:	82 34       	cpi	r24, 0x42	; 66
 3e6:	31 f1       	breq	.+76     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3e8:	18 f4       	brcc	.+6      	; 0x3f0 <DIO_write+0xc>
 3ea:	81 34       	cpi	r24, 0x41	; 65
 3ec:	39 f0       	breq	.+14     	; 0x3fc <DIO_write+0x18>
 3ee:	08 95       	ret
 3f0:	83 34       	cpi	r24, 0x43	; 67
 3f2:	e1 f1       	breq	.+120    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 3f4:	84 34       	cpi	r24, 0x44	; 68
 3f6:	09 f4       	brne	.+2      	; 0x3fa <DIO_write+0x16>
 3f8:	54 c0       	rjmp	.+168    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 3fa:	08 95       	ret
	{
		case PORT_A:
		if(value == LOW)
 3fc:	41 11       	cpse	r20, r1
 3fe:	0c c0       	rjmp	.+24     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		{
			PORTA &=~ (1<<pinNumber); // Write 0
 400:	2b b3       	in	r18, 0x1b	; 27
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	6a 95       	dec	r22
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	80 95       	com	r24
 412:	82 23       	and	r24, r18
 414:	8b bb       	out	0x1b, r24	; 27
 416:	08 95       	ret
		}
		else if(value == HIGH)
 418:	41 30       	cpi	r20, 0x01	; 1
 41a:	09 f0       	breq	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41c:	5c c0       	rjmp	.+184    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
		{
			PORTA |=(1<<pinNumber); //Write 1
 41e:	2b b3       	in	r18, 0x1b	; 27
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 c0       	rjmp	.+4      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	6a 95       	dec	r22
 42c:	e2 f7       	brpl	.-8      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 42e:	82 2b       	or	r24, r18
 430:	8b bb       	out	0x1b, r24	; 27
 432:	08 95       	ret
		{
			//error handling
		}
		break;
		case PORT_B:
		if(value == LOW)
 434:	41 11       	cpse	r20, r1
 436:	0c c0       	rjmp	.+24     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
		{
			PORTB &=~ (1<<pinNumber); // Write 0
 438:	28 b3       	in	r18, 0x18	; 24
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	88 0f       	add	r24, r24
 442:	99 1f       	adc	r25, r25
 444:	6a 95       	dec	r22
 446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	80 95       	com	r24
 44a:	82 23       	and	r24, r18
 44c:	88 bb       	out	0x18, r24	; 24
 44e:	08 95       	ret
		}
		else if(value == HIGH)
 450:	41 30       	cpi	r20, 0x01	; 1
 452:	09 f0       	breq	.+2      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 454:	40 c0       	rjmp	.+128    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
		{
			PORTB |=(1<<pinNumber); //Write 1
 456:	28 b3       	in	r18, 0x18	; 24
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 466:	82 2b       	or	r24, r18
 468:	88 bb       	out	0x18, r24	; 24
 46a:	08 95       	ret
		{
			//error handling
		}
		break;
		case PORT_C:
		if(value == LOW)
 46c:	41 11       	cpse	r20, r1
 46e:	0c c0       	rjmp	.+24     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
		{
			PORTC &=~ (1<<pinNumber); // Write 0
 470:	25 b3       	in	r18, 0x15	; 21
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	6a 95       	dec	r22
 47e:	e2 f7       	brpl	.-8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 480:	80 95       	com	r24
 482:	82 23       	and	r24, r18
 484:	85 bb       	out	0x15, r24	; 21
 486:	08 95       	ret
		}
		else if(value == HIGH)
 488:	41 30       	cpi	r20, 0x01	; 1
 48a:	29 f5       	brne	.+74     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
		{
			PORTC |=(1<<pinNumber); //Write 1
 48c:	25 b3       	in	r18, 0x15	; 21
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 49c:	82 2b       	or	r24, r18
 49e:	85 bb       	out	0x15, r24	; 21
 4a0:	08 95       	ret
		{
			//error handling
		}
		break;
		case PORT_D:
		if(value == LOW)
 4a2:	41 11       	cpse	r20, r1
 4a4:	0c c0       	rjmp	.+24     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		{
			PORTD &=~ (1<<pinNumber); // Write 0
 4a6:	22 b3       	in	r18, 0x12	; 18
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ae:	88 0f       	add	r24, r24
 4b0:	99 1f       	adc	r25, r25
 4b2:	6a 95       	dec	r22
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4b6:	80 95       	com	r24
 4b8:	82 23       	and	r24, r18
 4ba:	82 bb       	out	0x12, r24	; 18
 4bc:	08 95       	ret
		}
		else if(value == HIGH)
 4be:	41 30       	cpi	r20, 0x01	; 1
 4c0:	51 f4       	brne	.+20     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
		{
			PORTD |=(1<<pinNumber); //Write 1
 4c2:	22 b3       	in	r18, 0x12	; 18
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4d2:	82 2b       	or	r24, r18
 4d4:	82 bb       	out	0x12, r24	; 18
 4d6:	08 95       	ret

000004d8 <INT0_Init>:

#include "interrupt.h"
uint8_t mode;
void INT0_Init(void)
{
	SREG  &= ~(1<<7);
 4d8:	8f b7       	in	r24, 0x3f	; 63
 4da:	8f 77       	andi	r24, 0x7F	; 127
 4dc:	8f bf       	out	0x3f, r24	; 63
	GICR |=(1<<INT0);
 4de:	8b b7       	in	r24, 0x3b	; 59
 4e0:	80 64       	ori	r24, 0x40	; 64
 4e2:	8b bf       	out	0x3b, r24	; 59
	MCUCR = (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
 4e4:	83 e0       	ldi	r24, 0x03	; 3
 4e6:	85 bf       	out	0x35, r24	; 53
	SREG  |= (1<<7);
 4e8:	8f b7       	in	r24, 0x3f	; 63
 4ea:	80 68       	ori	r24, 0x80	; 128
 4ec:	8f bf       	out	0x3f, r24	; 63
 4ee:	08 95       	ret

000004f0 <__vector_1>:
}
ISR(INT0_vect)
{
 4f0:	1f 92       	push	r1
 4f2:	0f 92       	push	r0
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	0f 92       	push	r0
 4f8:	11 24       	eor	r1, r1
	mode = 0;
 4fa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 4fe:	0f 90       	pop	r0
 500:	0f be       	out	0x3f, r0	; 63
 502:	0f 90       	pop	r0
 504:	1f 90       	pop	r1
 506:	18 95       	reti

00000508 <Timer0_Delay>:
 *  Author: Mostafa
 */ 
#include "timer.h"
void Timer0_Delay(void)
{
	TCNT0 = 5; // Set Timer0 initial value to 5
 508:	85 e0       	ldi	r24, 0x05	; 5
 50a:	82 bf       	out	0x32, r24	; 50
	 * 1. Non PWM mode FOC0=1
	 * 2. Normal Mode WGM01=0 & WGM00=0
	 * 3. Normal Mode COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<CS02) | (1<<CS00);
 50c:	85 e8       	ldi	r24, 0x85	; 133
 50e:	83 bf       	out	0x33, r24	; 51

	while(!(TIFR & (1<<TOV0))); // Wait until the Timer0 Overflow occurs (wait until TOV0 = 1)
 510:	08 b6       	in	r0, 0x38	; 56
 512:	00 fe       	sbrs	r0, 0
 514:	fd cf       	rjmp	.-6      	; 0x510 <Timer0_Delay+0x8>

	TIFR |= (1<<TOV0); // Clear TOV0 bit by set its value
 516:	88 b7       	in	r24, 0x38	; 56
 518:	81 60       	ori	r24, 0x01	; 1
 51a:	88 bf       	out	0x38, r24	; 56

	TCCR0 = 0; // Stop Timer0 by clear the Clock bits (CS00, CS01 and CS02)
 51c:	13 be       	out	0x33, r1	; 51
 51e:	08 95       	ret

00000520 <Delay_s>:
}
void Delay_s(uint8_t number)
{
 520:	1f 93       	push	r17
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	18 2f       	mov	r17, r24
	for(int i = 0 ; i<number*4 ; i++)
 528:	c0 e0       	ldi	r28, 0x00	; 0
 52a:	d0 e0       	ldi	r29, 0x00	; 0
 52c:	03 c0       	rjmp	.+6      	; 0x534 <Delay_s+0x14>
	{
		Timer0_Delay();
 52e:	0e 94 84 02 	call	0x508	; 0x508 <Timer0_Delay>

	TCCR0 = 0; // Stop Timer0 by clear the Clock bits (CS00, CS01 and CS02)
}
void Delay_s(uint8_t number)
{
	for(int i = 0 ; i<number*4 ; i++)
 532:	21 96       	adiw	r28, 0x01	; 1
 534:	81 2f       	mov	r24, r17
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	88 0f       	add	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	c8 17       	cp	r28, r24
 542:	d9 07       	cpc	r29, r25
 544:	a4 f3       	brlt	.-24     	; 0x52e <Delay_s+0xe>
	{
		Timer0_Delay();
	}
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	1f 91       	pop	r17
 54c:	08 95       	ret

0000054e <_exit>:
 54e:	f8 94       	cli

00000550 <__stop_program>:
 550:	ff cf       	rjmp	.-2      	; 0x550 <__stop_program>
